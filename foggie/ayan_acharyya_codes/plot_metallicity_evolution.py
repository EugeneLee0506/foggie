##!/usr/bin/env python3

"""

    Title :      plot_metallicity_evolution
    Notes :      To TRACK ambient gas metallicity around young (< 10Myr) stars as function of redshift, write to file, and plot
    Input :      txt file with all young star properties for each snapshot of each halo (generated by filter_star_properties.py)
    Output :     One pandas dataframe per halo as a txt file (Or fits file?)
    Author :     Ayan Acharyya
    Started :    July 2021
    Example :    run plot_metallicity_evolution.py --system ayan_hd --halo 8508

"""
from header import *
from util import *
from track_metallicity_evolution import *

# ----------------------------------------------------------------------------------
def plot_median_metallicity(z_arr, Z_arr, ax, args, color=['salmon', 'brown']):
    '''
    Function to plot the metallicity evolution
    '''
    median_arr, low_arr, up_arr = [], [], []
    for thisZ in Z_arr:
        median_arr.append(np.median(thisZ))
        low_arr.append(np.percentile(thisZ, 16))
        up_arr.append(np.percentile(thisZ, 84))

    ax.fill_between(z_arr, low_arr, up_arr, color=color[0], lw=0.5, alpha=0.7)
    ax.plot(z_arr, median_arr, color=color[1], lw=1)

    ax.set_xlabel('Redshift', fontsize=args.fontsize)
    ax.set_ylabel(r'Metallicity (Z/Z$_\odot$)', fontsize=args.fontsize)

    ax.set_xticklabels(['%.1F'%item for item in ax.get_xticks()], fontsize=args.fontsize)
    ax.set_yticks(np.linspace(Z_min, Z_max, 5))
    ax.set_yticklabels(['%.1F'%item for item in ax.get_yticks()], fontsize=args.fontsize)

    ax.set_xlim(z_min, z_max)
    ax.set_xlim(ax.get_xlim()[::-1])
    ax.set_ylim(Z_min, Z_max)
    return ax

# ----------------------------------------------------------------------------------
def plot_metallicity_heatmap(z_arr, Z_arr, ax, args):
    '''
    Function to plot the metallicity evolution
    '''
    hist_arr = []
    for index, thisZ in enumerate(Z_arr):
        hist, bin_edges = np.histogram(thisZ, bins=40, range=(Z_min, Z_max), density=True)
        hist = hist / np.max(hist) # to make sure max = 1, so that all redshifts get equal weightage visually
        hist_arr.append(hist)

    hist_arr = np.transpose(np.array(hist_arr))
    p = ax.imshow(hist_arr, cmap='viridis', aspect='auto', origin='lower', extent=(0, np.shape(hist_arr)[1], 0, np.shape(hist_arr)[0])) # extent = (left, right, bottom, top) in data coordinates

    #ax.grid(False)
    #x_tick_arr = np.linspace(np.max(z_arr), np.min(z_arr), 5)
    #ax.set_xticks(np.linspace(0, np.shape(hist_arr)[1], len(x_tick_arr)))

    x_tick_arr = z_arr
    ax.set_xticks(np.arange(len(z_arr)) + 0.5)

    ax.set_xticklabels(['%.1F'%item for item in x_tick_arr], fontsize=args.fontsize)
    ax.set_xlabel('Redshift', fontsize=args.fontsize)

    y_tick_arr = np.linspace(Z_min, Z_max, 5)
    ax.set_yticks(np.linspace(0, len(bin_edges) - 1, len(y_tick_arr)))
    ax.set_yticklabels(['%.1F'%item for item in y_tick_arr], fontsize=args.fontsize)

    cb = plt.colorbar(p)
    cb.ax.set_ylabel('PDF of young stars', fontsize=args.fontsize)

    return ax


# -----------------------------------------------------------------------------------
if __name__ == '__main__':
    start_time = time.time()

    args = parse_args('8508', 'RD0042')
    if type(args) is tuple: args = args[0] # if the sim has already been loaded in, in order to compute the box center (via utils.pull_halo_center()), then no need to do it again
    if not args.keep: plt.close('all')

    if args.do_all_halos: list_of_halos = get_all_halos(args)
    else: list_of_halos = [args.halo]

    z_min, z_max = None, None #0, 0.8
    Z_min, Z_max = 0, 4
    color_arr = [['salmon', 'brown'], ['lightgreen', 'darkgreen'], ['silver', 'black'], ['paleturquoise', 'lightseagreen'], ['pink', 'crimson'], ['wheat', 'orange']]

    # ----------looping over halos----------------------
    for index, this_halo in enumerate(list_of_halos):
        myprint('Plotting halo ' + this_halo + '; ' + str(index+1) + ' of ' + str(len(list_of_halos)), args)
        args.halo = this_halo

        foggie_dir, output_dir, run_loc, code_path, trackname, haloname, spectra_dir, infofile = get_run_loc_etc(args)
        infilename = output_dir + 'txtfiles/' + args.halo + '_Z_vs_z_allsnaps.txt'

        if not os.path.exists(infilename):
            myprint(infilename + ' does not exist; calling assimilate_this_halo()..', args)
            _, _ = assimilate_this_halo(args)

        z_arr, Z_arr = read_list_file(infilename, args)
        Z_arr = [x for _, x in sorted(zip(z_arr, Z_arr), reverse=True)]
        z_arr = sorted(z_arr, reverse=True)

        fig, axes = plt.subplots(1, 2, figsize=(10, 4))
        fig.subplots_adjust(top=0.95, left=0.1, right=0.98, bottom=0.15)

        axes[0] = plot_median_metallicity(z_arr, Z_arr, axes[0], args, color=color_arr[index])
        axes[1] = plot_metallicity_heatmap(z_arr, Z_arr, axes[1], args)
        fig.text(0.15, 0.85, halo_dict[args.halo], color='black', ha='left', va='top', fontsize=args.fontsize)

        plt.show(block=False)

        if args.saveplot:
            fig_output_dir = output_dir + 'figs/'
            saveplot(fig, args, halo_dict[args.halo] + '_Z_vs_z', outputdir=fig_output_dir)

    myprint('All halos done in %s minutes' % ((time.time() - start_time) / 60), args)
