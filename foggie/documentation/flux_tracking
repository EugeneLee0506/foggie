This document describes how to use the flux tracking code, located in /flux_tracking/flux_tracking.py.
Author: Cassi

Description:
------------
flux_tracking.py calculates a variety of fluxes across a user-defined surface, then saves these
fluxes to a file in hdf5 format.


Requires:
---------
There must exist an entry in /halo_infos/haloID/runID/halo_c_v for the snapshot you are running
flux_tracking.py on.

If you would like to remove fluxes, there must exist an entry in /halo_infos/haloID/runID/satellites.hdf5
for the snapshot you are running flux_tracking.py on. ('haloID' is '008508' for Tempest,
for example, and 'runID' is 'nref11c_nref9f', for example.) For example, if you would
like to run flux_tracking.py on DD1920 of Tempest run nref11c_nref9f, there must be an entry in
/halo_infos/8508/nref11c_nref9f/satellites.hdf5 file for DD1920.

If there are not entries in the above files for the snapshot you are running flux_tracking.py on,
or if the above files do not exist for the halo and run you are running flux_tracking.py on, you
must first add them. See the documentation for get_satellite_positions.py and
get_halo_c_v_parallel.py to do so.

If running from pleiades, the code will run in less than a tenth the length of time if you write
your script to first copy the output files for whatever snapshot you're running it on to the /tmp
folder of the node it's running on. This is automatically built into the code for running with
system = pleiades_cassi, so it is very easy to add this functionality if you'd like it for your
system too. Ask Cassi to add it, or search for 'if (system=='pleiades_cassi')' in the code and add
it yourself.


User inputs:
------------
flux_tracking.py is designed to be run from the command line with command line options. You can do:
> python flux_tracking.py --help
to see the different command line options and what you can enter for each. If you do not enter
any command line options, flux_tracking.py will run with all the default options selected.
Here are the command line options:

--halo XXXX
Which halo? Default is Tempest (8508).

--run nrefXX_nrefXX
Which run? Default is nref11c_nref9f.

--output XXXXXX
Which output(s)? Options: Specify a single output (this is default and the default output is RD0034)
or specify a range of outputs using commas to list individual outputs and dashes for ranges of
outputs (e.g. "RD0020-RD0025" or "DD1341,DD1353,DD1600-DD1700", no spaces!).

--output_step X
If you want every Nth output, this specifies N. Default: 1 (every output in specified range)

--system XXXXXXXX
Which system are you on? Default is cassiopeia.

--local
If using system cassiopeia: Are the simulation files stored locally? Default is no. This option
has no meaning if the system specified is not cassiopeia.

--nproc X
How many processes do you want? Default is 1 (no parallelization), if multiple outputs and multiple
processors are specified, code will run one output per processor. If you are running on a single
output only, do not use more than 1 processor.

--surface "['XXXX', X, X, X, X]"
What surface type for computing the flux? Default is sphere in 200 steps between 0.05*refine_width
and 2*refine_width. Other options are "frustum" or "cylinder". Note that all surfaces will be centered
on halo center. To specify the shape, size, and orientation of the surface you want, input a list as
follows:
Don't forget to put the whole list in quotes! The whole thing must be passed as a single string,
which also means you'll need to use a different type of quotes for the string specifying the shape
at the beginning of the list.
If you want a sphere, give:
"['sphere', inner_radius, outer_radius, num_radii]"
where inner_radius is the inner boundary as a fraction of refine_width, outer_radius is the outer
boundary as a fraction (or multiple) of refine_width, and num_radii is the number of radii where you
want the flux to be calculated between inner_radius and outer_radius (inner_radius and outer_radius
are automatically included).
If you want a frustum, give:
"['frustum', axis, inner_radius, outer_radius, num_radii, opening_angle]"
where axis specifies what axis to align the frustum with and can be one of the following:
'x'
'y'
'z'
'minor' (specifies alignment with galaxy minor axis)
(x,y,z) (a tuple specifying a 3D vector to align the frustum with)
If axis is anything but the 3D vector, you can also start the string with '-', like so: '-x' or '-minor',
then it will compute a frustum pointing the opposite direction.
inner_radius, outer_radius, and num_radii are the same as for the sphere and opening_angle gives the
angle in degrees of the opening angle of the cone, measured from axis (note that the total opening
angle of the cone will be 2*opening_angle).
If you want a cylinder, give:
"['cylinder', axis, bottom_edge, top_edge, radius, step_direction, num_steps]"
where axis specifies what axis to align the length of the cylinder with and can be one of the following:
'x'
'y'
'z'
'minor' (aligns with disk minor axis)
(x,y,z) (a tuple giving a 3D vector for an arbitrary axis).
For all axis definitions other than the arbitrary vector, if the axis string starts with a '-',
it will compute a cylinder pointing in the opposite direction.
bottom_edge, top_edge, and radius give the dimensions of the cylinder, where bottom_ and top_edge are
distance from halo center, by default in units of refine_width (unless the --kpc option is specified),
and radius is always in units of kpc.
step_direction can be 'height', which will compute fluxes across circular planes in the cylinder
parallel to the flat sides, or 'radius', which will compute fluxes across different radii within the
cylinder perpendicular to the cylinder's flat sides.
'num_steps' gives the number of places (either heights or radii) within the cylinder where to calculate fluxes.

--kpc
If this option is specified, inner_radius and outer_radius given in the surface argument will be
in units of kpc rather than their default, which is fractions of refine_width. The default for this
option is False. If you want to track fluxes over time, such as for calculating gas changing phases,
using kpc instead of fractions of refine_width will NOT work because the errors are too large.

--remove_sats
If this option is specified, it will excise satellites before calculating the flux. Note that this
only works if computing the flux of a DD output! This cannot work with the RD outputs because
they are spaced too far apart in time.

--sat_radius X
If --remove_sats is specified, then this option decides the radius (in kpc) around satellites that
will be excised from the domain. The default is 10.

--flux_type XXXX
What fluxes do you want to compute? Currently, the options are "mass" (includes metal masses)
"energy" "entropy" and "O_ion_mass". You can compute all of them by inputting "mass,energy,entropy,O_ion_mass" (no spaces!)
and the default is to do all. Note that increasing the number of fluxes computed drastically increases runtime.
If there is a type of flux that you'd like that is not on this list, ask Cassi to add it.

Outputs:
--------
The code saves to file a hdf5 table located within your output_path as specified by get_run_loc_etc.py.
It will output files per snapshot, and will be saved within subfolders specifying the halo id
and run. For example, if you run flux_tracking.py on a sphere for halo 8508, nref11c_nref9f, output
DD1236, using flux_type 'mass' and removing satellites it will output two files:
output_path/fluxes_halo_008508/nref11c_nref9f/DD1236_fluxes_sphere_nosat_mass.hdf5
output_path/fluxes_halo_008508/nref11c_nref9f/DD1236_fluxes_sphere_sat_mass.hdf5
The file with _nosat appended contains the fluxes with satellites excised from the domain. The file
with _sat appended gives the fluxes into/out of those excised satellites.

To read in the table in python, do:
    from astropy.table import Table
    fluxes_table = Table.read('DD1236_fluxes_sphere_nosat_mass.hdf5', path='all_data')
Then to get each column of the table, index it with the name of the column, e.g.
    fluxes_table['radius']
    fluxes_table['net_mass_flux']
So now you can easily plot things vs. radius, e.g.
    import matplotlib.pyplot as plt
    plt.plot(fluxes_table['radius'], fluxes_table['net_mass_flux'])
You can get a full list of all column names in the file by doing:
    print(fluxes_table.columns)
And you can find the units for a column (example here is radius) by doing:
    print(fluxes_table['radius'].unit)

Each file has a ridiculous number of columns. The first few columns are information about the snapshot
and where the flux was calculated, for the _nosat file, they are "redshift" and "radius", which tells
you the redshift of the snapshot and the radius of the sphere where the fluxes are calculated.
For the _sat file, the first few columns are "redshift", "inner_radius", "outer_radius", which tells
you again the redshift, and the radii *between* which the fluxes into and out of satellites are
calculated. For example, if inner_radius is 30 kpc and outer_radius is 40 kpc, that indicates the
fluxes are calculated to and from all satellites located between 30 and 40 kpc (which may be none,
in which case the flux will be zero). If the surface is a cylinder with 'height' specified as the
flux direction, then instead of inner_radius and outer_radius, these will be replaced with bottom_edge
and top_edge. Similarly, 'radius' will be replaced with 'height' in the _nosat file.

The rest of the columns list the values of the fluxes, depending on what you specified for flux_type.
The "mass" flux type gives columns of "mass_flux" and "metal_flux". These are given in Msun/yr.
The "energy" flux type gives columns of "kinetic_energy_flux", "thermal_energy_flux", "potential_energy_flux",
and "radiative_energy_flux" (see note below about this one). These are given in erg/yr.
The "entropy" flux type gives columns of "entropy_flux". This is given in cm^2*keV/yr.
The "O_ion_mass" flux type gives columns for fluxes of total oxygen flux and each of the oxygen ions,
"O_flux", "OI_flux", "OII_flux", etc. up to "OIX_flux". These fluxes are mass fluxes, given in Msun/yr.

The fluxes are broken down into net flux, inward flux, and outward flux. They are then
further broken down into cold, cool, warm, and hot gas, with the sum of these 4 being equal to
just the net flux. To obtain the net (meaning both inward and outward) flux, append "net_" to the
front of the flux type, e.g. "net_mass_flux". To obtain the radially inward or outward flux, append
"_in" or "_out" to the *end* of the flux type (and remove "net_" from the beginning), e.g. "mass_flux_in".
To obtain the flux for a specific temperature gas, append "cold_", "cool_", "warm_", or "hot_" to the
beginning of the flux type (but after "net_" if present), e.g. "cold_mass_flux_in" or "net_hot_mass_flux".

For the _sat file, the columns are the same (but no radiative_energy_flux, see below), but "_in"
in this case indicates flux that is *entering* the domain coming *from* satellites between
inner_radius and outer_radius (see above). Likewise, "_out" indicates flux that is *leaving* the
domain and going *to* satellites.

If the surface requested is a frustum or a cylinder, the above two files will be created, but there will also
be one additional file, e.g. DD1236_fluxes_edges_frustum. This file also has inner_radius and
outer_radius (or bottom_edge and top_edge) like the _sat file, and gives the fluxes passing through
the outer edges of the cone or cylinder between inner_radius and outer_radius, or passing through the
outer curved edge of the cylinder between bottom_edge and top_edge. In this case, "_in" indicates fluxes
*entering* the cone or cylinder through the edges, and "_out" indicates fluxes *leaving* the cone or
cylinder through the edges.

Note about radiative energy fluxes:
By definition, the radiative energy flux is volumetric, not the physical motion of a gas quantity
across a surface. Therefore, the radiative energy flux is calculated as the amount of energy lost
to radiation within a volume, and thus for both the sphere and the frustum, requires an inner_radius
and an outer_radius to specify a shell of some volume. However, the radiative_energy_flux can only
be found in the _nosat file, where only "radius" is specified. What this means is that the
radiative_energy_flux listed for a given "radius" is *actually* the radiative energy lost *between*
that radius and the next one. This means that the radiative_energy_flux column should be shorter
than the others by 1, but to keep the columns the same length, it just repeats the second-to-last
entry as the last entry. Because _sat and _edges_frustum (if frustum is chosen) are both also
volumetric, columns in these two tables are shorter by 1 than the _nosat file.
